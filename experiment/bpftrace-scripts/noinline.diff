diff --git a/net/ipv4/tcp_prague.c b/net/ipv4/tcp_prague.c
index e93b2b4ad..20845e940 100644
--- a/net/ipv4/tcp_prague.c
+++ b/net/ipv4/tcp_prague.c
@@ -443,7 +443,7 @@ static void prague_cwnd_changed(struct sock *sk)
 
 /* TODO(asadsa): move this detection out of prague to make it more generic. */
 /* TODO(asadsa): check if self-limited works as given out in the design */
-static void prague_classic_ecn_detection(struct sock *sk)
+static noinline void prague_classic_ecn_detection(struct sock *sk)
 {
 	struct prague *ca = prague_ca(sk);
 	struct tcp_sock *tp = tcp_sk(sk);
@@ -663,9 +663,9 @@ static void prague_update_rtt_scaling(struct sock *sk, u32 ssthresh)
 	}
 }
 
-static u64 prague_classic_ecn_fallback(struct tcp_sock *tp, u64 alpha)
+static noinline u64 prague_classic_ecn_fallback(struct tcp_sock *tp, u64 alpha)
 {
-	u64 c = min(tp->classic_ecn, CLASSIC_ECN) - L_STICKY;
+	u64 c = min(max(tp->classic_ecn, L_STICKY), CLASSIC_ECN) - L_STICKY;
 	/* 0 ... CLASSIC_ECN/PRAGUE_MAX_ALPHA */
 	c = (c >> 1) + (c >> 3); /* c * ~0.6 */
 
@@ -688,7 +688,7 @@ static void prague_enter_cwr(struct sock *sk)
 	ca->cwr_stamp = tp->tcp_mstamp;
 	alpha = ca->upscaled_alpha >> PRAGUE_SHIFT_G;
 
-	if (prague_ecn_fallback == 1 && tp->classic_ecn > L_STICKY)
+	if (prague_ecn_fallback == 1)
 		alpha = prague_classic_ecn_fallback(tp, alpha);
 
 	if (prague_is_rtt_indep(sk) && (ca->cwnd_mode == 1 && likely(ca->saw_ce))) {
