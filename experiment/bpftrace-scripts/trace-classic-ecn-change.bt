#include <linux/tcp.h>

// Constants from https://github.com/L4STeam/linux/blob/15b3b6c85e5f996618a6fb8a9b50a8f9e1886a06/net/ipv4/tcp_prague.c
#define PRAGUE_ALPHA_BITS	(uint32)24

#define PRAGUE_MAX_SRTT_BITS	(uint32)18
#define PRAGUE_MAX_MDEV_BITS	(PRAGUE_MAX_SRTT_BITS+1)
#define PRAGUE_INIT_ADJ_US	262144 /* 1 << (PRAGUE_MAX_MDEV_BITS-1) */

/* Weights, 1/2^x */
#define V 1	/* 0.5 */
#define D 1	/* 0.5 */

#define V0_LG	((uint64)10014683 >> V)	/* reference queue V of ~750us */
#define D0_LG	((uint64)11498458 >> D)	/* reference queue D of ~2ms */

// When the kernel patch is applied, use these instead of the values above
// #define V0_LG	((uint64)160234941 >> V)	/* reference queue V of ~750us */
// #define D0_LG	((uint64)183975331 >> D)	/* reference queue D of ~2ms */

/**
`prague_classic_ecn_detection` is usually inlined and thereby not traceable.
Use `noinline.diff` and build the kernel yourself to be able to
run this script.

Alternatively, you can use `prague_cong_control` instead of
`prague_classic_ecn_detection` with the default prague kernel.
The results will not be totally correct (but similar enough),
since `prague_classic_ecn_detection` might not be called in `prague_cong_control`.
    */
kprobe:prague_classic_ecn_detection {
	$sk = (struct sock*)arg0;
	$tp = (struct tcp_sock*)$sk;
	$csk = (struct inet_connection_sock*)$sk;
	$ca = $csk->icsk_ca_priv;
    $rest_depth_us = (uint32)($ca[11] & 4294967295);
	$rest_mdev_us = (uint32)(($ca[11] >> 32) & 4294967295);

    $classic_ecn = $tp->classic_ecn;

	$min_rtt_us = $tp->rtt_min.s[0].v;
	$g_srtt_shift = $tp->g_srtt_shift;
	$g_mdev_shift = $tp->g_mdev_shift;
	$srtt_us = $tp->srtt_pace_us >> $g_srtt_shift;
	$mdev_us = $tp->mdev_pace_us >> $g_mdev_shift;
	$adj_us = (uint64)(PRAGUE_INIT_ADJ_US >> (PRAGUE_MAX_MDEV_BITS - $g_mdev_shift));

	$mdev_us = (uint64)$mdev_us * $rest_mdev_us + $adj_us;

	$mdev_us >>= $g_mdev_shift;
	$mdev_lg = (uint64)0;
	while($mdev_lg < 64) {
		if ($mdev_us <= 1) {
			break;
		}
		$mdev_us >>= 1;
		$mdev_lg++;
	}

	$mdev_lg <<= PRAGUE_ALPHA_BITS - V;
	$mdev_change = (int64)$mdev_lg - (int64)V0_LG;

	if ($mdev_change >= 0) {
		@mdev_change_pos = count();
		@mdev_change_pos_sum = sum($mdev_change);
	} else {
		@mdev_change_neg = count();
		@mdev_change_neg_sum = sum(-$mdev_change);
	}

	$depth_us = $srtt_us - $min_rtt_us;
	$depth_us = $depth_us * $rest_depth_us + ($adj_us >> 1);
	$depth_us >>= $g_srtt_shift;
	$depth_lg = (uint64)0;
	while($depth_lg < 64) {
		if ($depth_us <= 1) {
			break;
		}
		$depth_us >>= 1;
		$depth_lg++;
	}

	$depth_lg <<= PRAGUE_ALPHA_BITS - D;
	if ($depth_lg > D0_LG) {
		$depth_change = (int64)$depth_lg - (int64)D0_LG;
		@depth_change_pos = count();
		@depth_change_pos_sum = sum($depth_change);
	} else {
		@depth_change_zero = count();
	}
}
